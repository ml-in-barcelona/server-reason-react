{0 Exclude client code from the native build}

[browser_only] is the ppx to exclude client code from the server build, making sure a library can run on both build targets. It also allows to conditionally execute code based on the platform.

For example, if you're using Webapi to query the DOM and extract some data from it. This code should only run on the client, and there's no equivalent or fallback on the server.

In order to compile and run successfully on the server, you can use [let%browser_only],[switch%platform] or the [@platform]. This page explains how to use them.

{1 Example}

The ppx expose a [%browser_only] attribute that can be used to discard a function, and [switch%platform] to conditionally execute code based on the platform.

{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
}
]}

{[
switch%platform (Runtime.platform) {
| Server => print_endline("This prints to the terminal")
| Client => Js.log("This prints to the console")
};
]}

{1 Installation}

Add [server-reason-react.browser_ppx] into to your pps field under a dune stanzas (melange.emit, libraries or executable) in your dune files.

You would need to add it on both "server" and "client" dune files. Adding the [-js] flag [server-reason-react.browser_ppx -js] for the client and without for the server:
{[
; server exectuable
(executable
 (name server)
 (preprocess
  (pps server-reason-react.browser_ppx)))

; melange emitting JavaScript
(melange.emit
 (target app)
 (preprocess
  (pps server-reason-react.browser_ppx -js)))
]}

{1 Usage}

{2 let%browser_only to discard functions}
{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
};
]}

The method tagged by [browser_only] will keep the function for the client build, but will be discarded for the server build. In more detail, the body of function will be transformed to a [Runtime.Impossible_in_ssr] exception (and

If this function ever runs on the server by accident, it will raise the exception. If this exception isn't caught, the server will crash. Calling a function on the server that should only run on the client, it's very unlikely to happen.

In any case, there may be cases where catch the exception and provide a default behaviour/value, can be useful.

Following with the example from above:
{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
}

let main = id =>
  switch (countDomNodes(id)) {
  | exception Runtime.Impossible_in_ssr(_message) => 0
  };
]}

{2 switch%platform to conditionally exclude an expression for each platform}

[switch%platform] allows to conditionally execute code based on the platform. There are some cases where you need to run a specific code only on the server or only on the client.

{[
switch%platform (Runtime.platform) {
| Server => print_endline("This prints to the terminal")
| Client => Js.log("This prints to the console")
};
]}

Not only executing code, but any expression can be part of the switch.

{[
let howManyColumns =
  switch%platform (Runtime.platform) {
  | Server => 0
  | Client => 12
  };
]}

Note that the expression is evaluated for each platform, but the type needs to be the same for all the branches

{2 @platform attribute}

The [@platform] attribute allows to specify code blocks that should only be included in the JavaScript or native build, respectively. This is useful when you have code that is specific to one platform and should not be included in the other.

For example, you can define two modules, but only one of them should be kept in the final build based on the platform.
{[
[@platform js]
module X = {
  type t = Js.Json.t;

  let a = 2 + 2;
};

[@platform native]
module Y = {
  type t = Js.Json.t;

  let a = 4 + 4;
};
]}

When compiling with the `-js` flag, only the block with [[@platform js]] (module X) is kept, and when compiling without it, only the block with [[@platform native]] (module Y) is kept. If you name the modules the same, the compiler won't complain and you would get a single module available in both targets.
