{0 server-reason-react}

This page explains the different modules available in [server-reason-react] and how to use them.

It assumes a minimum understanding of:
- {{:https://reasonml.github.io/docs/en/what-and-why}Reason}
- {{:reasonml.github.io/reason-react/}reason-react} (the react.js bindings)
- {{:https://melange.re/v3.0.0/what-is-melange.html}Melange} (the JavaScript compiler)
- {{:https://dune.readthedocs.io/en/stable}dune} (the build system)

{1 Installation}

{2:install-opam From opam's registry (recommended)}

{[
opam install server-reason-react
]}

{2:install-source From source}

To use the development version, install via opam pinning:
{[
opam pin server-reason-react.dev "https://github.com/ml-in-barcelona/server-reason-react.git#main" -y
]}

{1 Project Setup}

Add to your dune file:
{[
(libraries (server-reason-react.react server-reason-react.reactDom))
(preprocess (pps server-reason-react.ppx))
]}

{1 Basic Usage}

[server-reason-react] provides {!React} and {!ReactDOM} modules with the same interface as [reason-react], including JSX transformation via [server-reason-react.ppx]. Components follow the standard [reason-react] API as explained in their {{:https://reasonml.github.io/reason-react/docs/en/components}official documentation}.

Here's a simple example:

{[
module Greetings = {
  [@react.component]
  let make = (~name) => {
    <div>
      <h1> {React.string("Hello " ++ name)} </h1>
    </div>
  };
};
]}

Components are functions that return a [React.element] and are annotated with [@react.component]. By convention, they are named `make`. When used in JSX, they can be written without the `make` prefix, using just the module name.

Here's a more complex example with state:

{[
module Counter = {
  [@react.component]
  let make = (~name) => {
    let (count, setCount) = React.useState(() => 0);
    <div>
      <p> {React.string(name ++ " " ++ Int.to_string(count))} </p>
      <button onClick={_ => setCount(_ => count + 1)}>
        {React.string("Click me")}
      </button>
    </div>
  };
};
]}

Hooks like [React.useState] or [React.useEffect] are available but are no-ops when running on the server. Since components don't re-render on the server. Hooks like [React.useCallback] and [React.useMemo] have no memoization and return values just once.

{1 Server-side Rendering}

The main difference from [reason-react] is the ability to render on the server using {!ReactDOM}. The module provides three rendering methods:

{2 renderToString/renderToStaticMarkup}

[ReactDOM.renderToString] renders a React tree as a HTML string:
{[
let html = ReactDOM.renderToString(<App />);
]}

[ReactDOM.renderToStaticMarkup] renders a non-interactive React tree (can't be hydrated on the client):
{[
let html = ReactDOM.renderToStaticMarkup(<App />);
]}

{2 renderToStream}

[ReactDOM.renderToStream] renders a React tree as a {{:https://ocsigen.org/lwt/3.1.0/api/Lwt_stream}Lwt_stream} of type [Lwt_stream.t(string)]:

{[
let%lwt (stream, abort) = ReactDOM.renderToStream(<App />);
stream |> Lwt_stream.iter_s((chunk => {
  let%lwt () = Dream.write(response_stream, chunk);
  Dream.flush(response_stream);
}));
]}

Note: [Lwt] is required. See {{:https://github.com/ml-in-barcelona/server-reason-react/issues/205}this issue} for details.

{1 React Server Components}

React Server Components (RSC) is an architecture that allows you to render React components exclusively on the server, using Server-side code (such as Database queries or Filesystem operations). It allows to strip all client components (those components that require interactivity) from the JavaScript bundle sent to the client.

There's a entire area of improvements that RSC bring to the table, such as lazy loading client components only when they are needed, remove fetching data with useEffect hooks (by passing promises to those client components), and removing state by lifting it to the URL.

This library supports it, but many pieces are being polished, check the {{:https://github.com/ml-in-barcelona/server-reason-react/tree/main/demo}demo folder} for more information or the {{:https://github.com/ml-in-barcelona/server-reason-react/issues/204}umbrella issue}.
