{0 SSR and hydration}

{1 How does React handle SSR markup?}

[server-reason-react] via [ReactDOM.renderToString], [ReactDOM.renderToStaticMarkup] or [ReactDOM.renderToStream] generate the HTML markup on the server. When the page loads in the browser, React.js performs a process called "hydration".

Hydration attaches event handlers into the existing HTML elements, using reason-react's [ReactDOM.hydrateRoot]. In case of not having hydration and just using render (via [ReactDOM.renderRoot]), React will re-render the entire page from scratch, which may cause layout shifts and be slower than hydration.

For hydration to work correctly, the initial markup from the server must match exactly what React loads on the client. React will throw a hydration error if there is a mismatch.

For example:
- server renders: [<span>Hello from server</span>]
- client renders: [<span>Hello from client</span>]

With this mismatch, hydration will fail and React will re-render on the client. This will result in worse performance and user experience, like layout shifts and other annoyances.

Read more about it in the [React documentation](https://react.dev/reference/react-dom/client/hydrateRoot).

{1 Hydrate error}

Commonly, hydrate errors will appear in the console as:
{%html:
  <p style="background-color: #362422; color: #df5452; padding: 1em;">
    <strong>Text content does not match server-rendered HTML.</strong>
  </p>
%}

{2 Example}

Let's start by triggering a hydration error on purpose. Take a look at this code:

{@reasonml[
[@react.component]
let make = () => {
  let backgroundColor = switch%platform () {
    | Server => "red"
    | Client => "blue"
  };

  <div className=backgroundColor />;
};
]}

We use [switch%platform] to provide different values on the server and client. To understand how [switch%platform] works, look at the {{!page-"browser_ppx"} browser_ppx page}.

And let's see the diagram above, which shows how the code will behave on each SSR step:

{%html:<img src="./ssr-hydrate-issue.png" alt='Hydrate error' style="max-width: 100%; height: auto; vertical-align: middle;">%}

* As we can see, there is a difference between III and IV, that will cause React to complain about content mismatch.

This hydration error occurs because React detects a mismatch between the server-rendered markup ([background-color: red](IV)) and what it expects on the client during hydration ([background-color: blue](V)).

To fix these errors, you must either ensure the server and client render the same markup, or use helpers that detect when the client has been hydrated before making client-specific changes at the markup level.

{2 Possible solution: check if the client is mounted}

If we want different values on the server and client, we must do it after React hydrates the client or, commonly said, after *mount*.

To work on it we must check if the client mounted and then change this value. This can be done with a hook that will be executed only after the client is hydrated.

{@reasonml[
module IsClientMounted = {
  let use = () => {
    let (isMounted, setIsMounted) = React.useState(() => false);

    React.useEffect0(() => {
      // This will be executed only on the client and after the hydration
      setIsMounted(_ => true);
      None;
    });

    isMounted;
  };
};

[@react.component]
let make = () => {
  let isClientMounted = IsClientMounted.use();
  let backgroundColor = isClientMounted ? "blue" : "red"

  <div className=backgroundColor />;
};
]}

With a code like this one, the flow will be:

{%html:<img src="./ssr-no-hydrate-issue.png" alt='Hydrate without issue' style="max-width: 100%; height: auto; vertical-align: middle;">%}

** As we can see, there is no difference between III and IV, and React will be happy with it.

In this case, we don't even need [switch%platform] to know if it's on client or native as [useEffects] only runs on client and the value is provided on the client and the content "blue" and "red" are native compatible.

{1 Helpers that you can use}

{2 IsClientMounted}

[IsClientMounted] is a hook helper that you can create to check if the client is mounted.

{@reasonml[
let use = () => {
  let (isMounted, setIsMounted) = React.useState(() => false);

  React.useEffect0(() => {
    setIsMounted(_ => true);
    None;
  });

  isMounted;
};
]}

{3 When using it:}

You should use [IsClientMounted] whenever you have to deal with variables inside a component. For React markup, take a look at {{!section-"server-or-client-render"} <ServerOrClientRender/>} or {{!section-"client-only"} <ClientOnly/>}.

Example:

{@reasonml[
let isFocusable =
  isClientMounted ? children->isFocusableElement : false;
]}

Even with [isClientMounted], the content {b MUST} compile on [native]. If the client content is not [native] compatible, you must use [%browser_only].

{@reasonml[
let%browser_only getAnswer = () => 42

let answer = isClientMounted ? getAnswer() : 0;
]}

{@text[
1 |          let answer = isClientMounted ? getAnswer() : 0;
                                            ^^^^^^^^^^^
**Error** (alert browser_only): File.getAnswer
This expression is marked to only run on the browser where JavaScript can run. You can only use it inside a let%browser_only function.
]}

As you can see, [getAnswer] is a [browser_only] content and it must run under a [%browser_only]:

{@reasonml[
let%browser_only getAnswer = () => 42

let answer = isClientMounted ? [%browser_only () => getAnswer()]() : 0;
]}

{3 Using [switch%platform] and [%browser_only] with [isClientMounted]}

[switch%platform] and [browser_only] are helpers that allow us to keep the same file for both native and js without breaking the compiler (read more about them here: {{!page-"browser_ppx"} browser_ppx page}).

So we should use [switch%platform] only when we don't have a universal way to provide the same value. Then, if there is no way to provide the same value on native, you will probably not use those features.

If there is a way to provide the same value, but not in a universal way, you'll need [switch%platform] :

{@reasonml[
let foo = switch%platform () {
  | Server => foo_native()
  | Client => foo_client()
}
]}

In this case, as [foo] will have the same value on Server and Client, you won't need [isClientMounted] because Hydrate will never throw an error. We can conclude that if you need [switch%platform], it's probably because you can provide the exact value of a client, and then you will never need [switch%platform] and [isClientMounted] together.

In the case of the usage of [browser_only], sometimes the usage of [isClientMounted] does not avoid compiler error because even running only on the client, it compiles on native. So sometimes you will need it on the "client code":

{@reasonml[
let%browser_only foo_cant_compile_on_native = () => "Hey"

let value = isClientMounted
  ? [%browser_only () => foo_cant_compile_on_native()]
  : "Yah"
]}

So, [isClientMounted] does not replace the need for [browser_only] and vice-versa.

{%html:
  <div style="border-left: 4px solid #0366d6; padding: 0.2em 1em;">
    <strong>✏️ Note</strong>
    <p style="margin-top: 0.5em; margin-bottom: 0;">Remember, <code>switch%platform</code> is a helper to be used only when we don't have an alternative. However, we are constantly providing new universal content on <a href="https://github.com/ml-in-barcelona/server-reason-react" target="_blank">server-reason-react</a>, so you can ping us when you find something not universal that you think could be.</p>
  </div>
%}

{2:server-or-client-render <ServerOrClientRender/>}

{@reasonml[
[@react.component]
let make = (
  ~renderServerEl: unit => React.element,
  ~renderClientEl: unit => React.element
  ) => {
  let isClientMounted = UseIsClientMounted.use();

  switch (isClientMounted) {
  | false => renderServerEl()
  | true => renderClientEl()
  };
};
]}

[ServerOrClientRender] is a React Component that helps to provide native (server) and client content powered by [UseIsClientMounted] to avoid hydrate issues.

{3 When using it:}

You should use [<ServerOrClientRender/>] when working on React markup with different outputs on [native] and [client].

Example:

{@reasonml[
[@react.component]
let make = () => {
  <ServerOrClientRender
    renderServerEl={() => <RedComponent />}
    renderClientEl={() => <BlueComponent />}
  />;
};
]}

Even with [ServerOrClientRender], the content {b MUST} compile on [native]. If the client content is not [native] compatible, you must use [%browser_only].

{@reasonml[
// BlueComponent.re: Client Only File
[@react.component]
let make = () => <BlueComponent />

// Foo.re: Universal File
<ServerOrClientRender
  renderServerEl={() => <RedComponent />}
  renderClientEl={() => <BlueClientComponentOnly />}
/>
]}

{@text[
1 |         <BlueClientComponentOnly
             ^^^^^^^^^^^^^^^^^^^^^^^
**Error**: Unbound module BlueClientComponentOnly
]}

As you can see, [BlueClientComponentOnly] is not available on [native], cause it's client only and must run under a [%browser_only]:

{@reasonml[
<ServerOrClientRender
  renderServerEl={() => <RedComponent />}
  renderClientEl={
    [%browser_only () => <BlueClientComponentOnly />]
  }
/>
]}

{2:client-only <ClientOnly/>}

The [ClientOnly] component is built on top of [ServerOrClientRender]. It provides a helper to easily apply client-side content without hydration issues.

{[
[@react.component]
let make = (~children: unit => React.element) => {
  <ServerOrClientRender renderClientEl=children renderServerEl={() => RR.null} />;
};
]}

{3 When using it:}

You must use [<ClientOnly/>] when working with React markup that should output nothing ([RR.null]) on the server and only render content on the client side.

{@reasonml[
<ClientOnly>
  {() => "Hello World" -> RR.s}
</ClientOnly>
]}

Even when using [ClientOnly], the content {b MUST} compile on [native]. If the client content is not [native] compatible, you must use [%browser_only].

The following code will fail on native:

{@reasonml[
// ClientOnlyComponent.re: Client Only File
[@react.component]
let make = () => <div> "Hello World" -> RR.s </div>

// Foo.re:Universal File

<ClientOnly>
  {() => <ClientOnlyComponent />}
</ClientOnly>
]}

This results in the error:

{@text[
1 |         {() => <ClientOnlyComponent />}
                    ^^^^^^^^^^^^^^^^^^^
**Error**: Unbound module ClientOnlyComponent
]}

To fix this, wrap the client-only content with [%browser_only]:

{@reasonml[
<ClientOnly>
  [%browser_only
    () => <ClientOnlyComponent />]
</ClientOnly>
]}
