server-reason-react use the same API as [reason-react] (explained in their {{:https://reasonml.github.io/reason-react/docs/en/components}official documentation}).

Components are functions that return a [React.element] and are annotated with [@react.component]. By convention, they are named `make`, so when they are used inside JSX, they can be written without the `make` prefix and just the name of the module. If another name is used, it can be specified later in the JSX. For example, [<Counter />] and [<Counter.component />] are both valid.

{[
module Counter = {
  [@react.component]
  let make = (~name) => {
    let (count, setCount) = React.useState(() => 0);

    <div>
      <p> {React.string(name ++ " clicked " ++ Int.to_string(count) ++ " times")} </p>
      <button onClick={_ => setCount(_ => count + 1)}>
        {React.string("Click me")}
      </button>
    </div>
  };
};

module App = {
  let make = () => {
    <Counter name="John" />
  };
};
]}

{[
/* Imagine that this is a handler for an HTTP request, inside your server */
let handler = (_request) => {
  /* If we want to render the component to a string and return the HTML to the client: */
  let html = ReactDOM.renderToString(<App />);
  respond(html);
};
]}

Hooks like [React.useState] or [React.useEffect] are available in the [React] module, but when running in the server, they are no-ops. Since react components don't re-render on the server, hooks like [React.useCallback], [React.useMemo] have no memoization and return the same value just once.

{1:render-to-string Server-side rendering with renderToString/renderToStaticMarkup}

[ReactDOM.renderToString] renders a React tree to an HTML string. It does not support streaming or waiting for data. You can use [renderToStream] instead.

{[
let html = ReactDOM.renderToString(<App />);
]}

[ReactDOM.renderToStaticMarkup] renders a non-interactive React tree to an HTML string. Non-interactive means that the component should not be hydrated on the client. This can be useful to for Server-side generation of HTML (SSG).

{[
let html = ReactDOM.renderToStaticMarkup(<App />);
]}

{1:render-to-stream Server-side rendering with renderToStream}

[ReactDOM.renderToStream] renders a React tree to a {{:https://ocsigen.org/lwt/3.1.0/api/Lwt_stream}Lwt_stream.t}. with type [Lwt_stream.t(string)].

This snippet assumes that you are using [Dream](https://dream.ocsigen.org/) to serve the HTML, and [lwt_ppx](https://github.com/ocsigen/lwt_ppx) to handle the [let%lwt] syntax.

Those are optional choices, you can use any other server framework and not use [lwt_ppx].
{[
let%lwt (stream, abort) = ReactDOM.renderToStream(<App />);
stream |> Lwt_stream.iter_s((chunk => {
  /* Dream.write pushes the chunk into the response stream */
  let%lwt () = Dream.write(response_stream, chunk);
  Dream.flush(response_stream);
}));

/* abort is a function that can be called to stop the stream, and leaves the client to render the rest of the page */
]}

Note that [Lwt] is a required library. More details {{:https://github.com/ml-in-barcelona/server-reason-react/issues/205}in this issue}.

{1:rsc React Server Components}

React Server Components (RSC) is an architecture that allows you to render React components exclusively on the server, using Server-side code (such as Database queries or Filesystem operations). It allows to strip all client components (those components that require interactivity) from the JavaScript bundle sent to the client.

There's a entire area of improvements that RSC bring to the table, such as lazy loading client components only when they are needed, remove fetching data with useEffect hooks (by passing promises to those client components), and removing state by lifting it to the URL.

Half of the JavaScript ecosystem is losing their hair over this, but with [server-reason-react] you would be able to use from another language.

This library supports it, but many pieces are being polished, check the {{:https://github.com/ml-in-barcelona/server-reason-react/tree/main/demo}demo folder} for more information or the {{:https://github.com/ml-in-barcelona/server-reason-react/issues/204}umbrella issue}.
