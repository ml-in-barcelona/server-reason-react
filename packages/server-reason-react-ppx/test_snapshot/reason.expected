let lower =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) []
let lower_empty_attr =
  React.createElement "div"
    ((([|(Some (React.Attribute.String ("className", ("" : string))))|] |>
         Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_inline_styles =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.Style
               (ReactDOM.Style.to_string
                  (ReactDOM.Style.make ~backgroundColor:"gainsboro" ()))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_inner_html =
  React.createElement "div"
    ((([|(Some (React.Attribute.DangerouslyInnerHtml text))|] |>
         Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_opt_attr =
  React.createElement "div"
    ((([|(Option.map
            (fun v -> React.Attribute.String ("tabIndex", (string_of_int v)))
            (tabIndex : int option))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lowerWithChildAndProps foo =
  React.createElement "a"
    ((([|(Some
            (React.Attribute.String ("tabIndex", (string_of_int (1 : int)))));(
         Some
           (React.Attribute.String ("href", ("https://example.com" : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) [foo]
let lower_child_static =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list)
    [React.createElement "span"
       ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
          Array.of_list) []]
let lower_child_ident =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [lolaspa]
let lower_child_single =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list)
    [React.createElement "div"
       ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
          Array.of_list) []]
let lower_children_multiple foo bar =
  React.createElement "lower"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [foo; bar]
let lower_child_with_upper_as_children =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [React.Upper_case_component ((fun () -> App.make ()))]
let lower_children_nested =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.String
               ("className", ("flex-container" : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list)
    [React.createElement "div"
       ((([|(Some
               (React.Attribute.String ("className", ("sidebar" : string))))|]
            |> Array.to_list)
           |> (List.filter_map (fun a -> a)))
          |> Array.of_list)
       [React.createElement "h2"
          ((([|(Some
                  (React.Attribute.String ("className", ("title" : string))))|]
               |> Array.to_list)
              |> (List.filter_map (fun a -> a)))
             |> Array.of_list) ["jsoo-react" |> s];
       React.createElement "nav"
         ((([|(Some (React.Attribute.String ("className", ("menu" : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list)
         [React.createElement "ul"
            ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
               Array.of_list)
            [(examples |>
                (List.map
                   (fun e ->
                      React.createElement "li"
                        ((([|(Some
                                (React.Attribute.String
                                   ("key", (e.path : string))))|]
                             |> Array.to_list)
                            |> (List.filter_map (fun a -> a)))
                           |> Array.of_list)
                        [React.createElement "a"
                           ((([|(Some
                                   (React.Attribute.String
                                      ("href", (e.path : string))));(
                                Some
                                  (React.Attribute.Event
                                     ("onClick",
                                       (React.Attribute.Event.Mouse
                                          ((fun event ->
                                              ReactEvent.Mouse.preventDefault
                                                event;
                                              ReactRouter.push e.path) : 
                                          ReactEvent.Mouse.t -> unit)))))|]
                                |> Array.to_list)
                               |> (List.filter_map (fun a -> a)))
                              |> Array.of_list) [e.title |> s]])))
               |> React.list]]]]
let fragment foo = ((React.fragment ~children:(React.list [foo]) ())[@bla ])
let poly_children_fragment foo bar =
  React.fragment ~children:(React.list [foo; bar]) ()
let nested_fragment foo bar baz =
  React.fragment
    ~children:(React.list
                 [foo; React.fragment ~children:(React.list [bar; baz]) ()])
    ()
let nested_fragment_with_lower foo =
  React.fragment
    ~children:(React.list
                 [React.createElement "div"
                    ((([||] |> Array.to_list) |>
                        (List.filter_map (fun a -> a)))
                       |> Array.of_list) [foo]]) ()
let fragment_as_a_child =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list)
    [React.fragment
       ~children:(React.list
                    [React.createElement "iframe"
                       ((([||] |> Array.to_list) |>
                           (List.filter_map (fun a -> a)))
                          |> Array.of_list) []]) ()]
let upper = React.Upper_case_component (fun () -> Upper.make ())
let upper_prop = React.Upper_case_component (fun () -> Upper.make ~count ())
let upper_children_single foo =
  React.Upper_case_component (fun () -> Upper.make ~children:foo ())
let upper_children_multiple foo bar =
  React.Upper_case_component
    (fun () -> Upper.make ~children:(React.list [foo; bar]) ())
let upper_children =
  React.Upper_case_component
    (fun () ->
       Page.make ~moreProps:"hgalo"
         ~children:(React.createElement "h1"
                      ((([||] |> Array.to_list) |>
                          (List.filter_map (fun a -> a)))
                         |> Array.of_list) [React.string "Yep"]) ())
let upper_nested_module =
  React.Upper_case_component (fun () -> Foo.Bar.make ~a:1 ~b:"1" ())
let upper_child_expr =
  React.Upper_case_component (fun () -> Div.make ~children:(React.int 1) ())
let upper_child_ident =
  React.Upper_case_component (fun () -> Div.make ~children:lola ())
let upper_all_kinds_of_props =
  React.Upper_case_component
    (fun () ->
       MyComponent.make ~booleanAttribute:true ~stringAttribute:"string"
         ~intAttribute:1 ?forcedOptional:((Some "hello")[@explicit_arity ])
         ~onClick:(send handleClick)
         ~children:(React.createElement "div"
                      ((([||] |> Array.to_list) |>
                          (List.filter_map (fun a -> a)))
                         |> Array.of_list) ["hello"]) ())
let upper_ref_with_children =
  React.Upper_case_component
    (fun () ->
       FancyButton.make ~ref:buttonRef
         ~children:(React.createElement "div"
                      ((([||] |> Array.to_list) |>
                          (List.filter_map (fun a -> a)))
                         |> Array.of_list) []) ())
let lower_ref_with_children =
  React.createElement "button"
    ((([|(Some (React.Attribute.Ref ref));(Some
                                             (React.Attribute.String
                                                ("className",
                                                  ("FancyButton" : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) [children]
let lower_with_many_props =
  React.createElement "div"
    ((([|(Some (React.Attribute.String ("translate", ("yes" : string))))|] |>
         Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list)
    [React.createElement "picture"
       ((([|(Some (React.Attribute.String ("id", ("idpicture" : string))))|]
            |> Array.to_list)
           |> (List.filter_map (fun a -> a)))
          |> Array.of_list)
       [React.createElement "img"
          ((([|(Some
                  (React.Attribute.String
                     ("src", ("picture/img.png" : string))));(Some
                                                                (React.Attribute.String
                                                                   ("alt",
                                                                    ("test picture/img.png" : 
                                                                    string))));(
               Some (React.Attribute.String ("id", ("idimg" : string))))|] |>
               Array.to_list)
              |> (List.filter_map (fun a -> a)))
             |> Array.of_list) [];
       React.createElement "source"
         ((([|(Some
                 (React.Attribute.String ("type", ("image/webp" : string))));(
              Some
                (React.Attribute.String
                   ("src", ("picture/img1.webp" : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list) [];
       React.createElement "source"
         ((([|(Some
                 (React.Attribute.String ("type", ("image/jpeg" : string))));(
              Some
                (React.Attribute.String
                   ("src", ("picture/img2.jpg" : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list) []]]
let some_random_html_element =
  React.createElement "text"
    ((([|(Some (React.Attribute.String ("dx", ("1 2" : string))));(Some
                                                                    (React.Attribute.String
                                                                    ("dy",
                                                                    ("3 4" : 
                                                                    string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
module React_component_with_props =
  struct
    let make ?key  =
      ((fun ~lola ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list) [React.string lola])
      [@warning "-16"][@warning "-16"])
  end
let react_component_with_props =
  React.Upper_case_component
    (fun () -> React_component_with_props.make ~lola:"flores" ())
module Upper_case_with_fragment_as_root =
  struct
    let make ?key  =
      ((fun ?(name= "") ->
          fun () ->
            React.fragment
              ~children:(React.list
                           [React.createElement "div"
                              ((([||] |> Array.to_list) |>
                                  (List.filter_map (fun a -> a)))
                                 |> Array.of_list)
                              [React.string ("First " ^ name)];
                           React.Upper_case_component
                             ((fun () ->
                                 Hello.make ~one:"1"
                                   ~children:(React.string ("2nd " ^ name))
                                   ()))]) ())
      [@warning "-16"][@warning "-16"])
  end
module Using_React_memo =
  struct
    let make ?key  =
      ((fun ~a ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(Printf.sprintf "`a` is %s" a) |> React.string])
      [@warning "-16"][@warning "-16"])
  end
module Using_memo_custom_compare_Props =
  struct
    let make ?key  =
      ((fun ~a ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(Printf.sprintf "`a` is %d" a) |> React.string])
      [@warning "-16"][@warning "-16"])
  end
module Forward_Ref =
  struct
    let make ?key  =
      ((fun ~children ->
          ((fun ~ref ->
              fun () ->
                React.createElement "button"
                  ((([|(Some (React.Attribute.Ref ref));(Some
                                                           (React.Attribute.String
                                                              ("className",
                                                                ("FancyButton" : 
                                                                string))))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun a -> a)))
                     |> Array.of_list) [children])
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Onclick_handler_button =
  struct
    let make ?key  =
      ((fun ~name ->
          ((fun ?isDisabled ->
              fun () ->
                let onClick event = Js.log event in
                React.createElement "button"
                  ((([|(Some
                          (React.Attribute.String ("name", (name : string))));(
                       Some
                         (React.Attribute.Event
                            ("onClick",
                              (React.Attribute.Event.Mouse
                                 (onClick : ReactEvent.Mouse.t -> unit)))));(
                       Some
                         (React.Attribute.Bool
                            ("disabled", (isDisabled : bool))))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun a -> a)))
                     |> Array.of_list) [])
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Children_as_string =
  struct
    let make ?key  =
      ((fun ?(name= "joe") ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(Printf.sprintf "`name` is %s" name) |> React.string])
      [@warning "-16"][@warning "-16"])
  end
let () = Dream.run ()
let l = 33
module Uppercase_with_SSR_components =
  struct
    let make ?key  =
      ((fun ~children ->
          ((fun ~moreProps ->
              fun () ->
                React.createElement "html"
                  ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                     |> Array.of_list)
                  [React.createElement "head"
                     ((([||] |> Array.to_list) |>
                         (List.filter_map (fun a -> a)))
                        |> Array.of_list)
                     [React.createElement "title"
                        ((([||] |> Array.to_list) |>
                            (List.filter_map (fun a -> a)))
                           |> Array.of_list)
                        [React.string ("SSR React " ^ moreProps)]];
                  React.createElement "body"
                    ((([||] |> Array.to_list) |>
                        (List.filter_map (fun a -> a)))
                       |> Array.of_list)
                    [React.createElement "div"
                       ((([|(Some
                               (React.Attribute.String
                                  ("id", ("root" : string))))|]
                            |> Array.to_list)
                           |> (List.filter_map (fun a -> a)))
                          |> Array.of_list) [children];
                    React.createElement "script"
                      ((([|(Some
                              (React.Attribute.String
                                 ("src", ("/static/client.js" : string))))|]
                           |> Array.to_list)
                          |> (List.filter_map (fun a -> a)))
                         |> Array.of_list) []]])
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Upper_with_aria =
  struct
    let make ?key  =
      ((fun ~children ->
          fun () ->
            React.createElement "div"
              ((([|(Some
                      (React.Attribute.String
                         ("aria-hidden", ("true" : string))))|]
                   |> Array.to_list)
                  |> (List.filter_map (fun a -> a)))
                 |> Array.of_list) [children])
      [@warning "-16"][@warning "-16"])
  end
let data_attributes_should_transform_to_kebabcase =
  React.fragment
    ~children:(React.list
                 [React.createElement "div"
                    ((([|(Some
                            (React.Attribute.String
                               ("data-attribute", ("" : string))));(Some
                                                                    (React.Attribute.String
                                                                    ("dataattribute",
                                                                    ("" : 
                                                                    string))));(
                         Some
                           (React.Attribute.String
                              ("className", ("md:w-1/3" : string))))|]
                         |> Array.to_list)
                        |> (List.filter_map (fun a -> a)))
                       |> Array.of_list) [];
                 React.createElement "div"
                   ((([|(Some
                           (React.Attribute.String
                              ("className", ("md:w-2/3" : string))))|]
                        |> Array.to_list)
                       |> (List.filter_map (fun a -> a)))
                      |> Array.of_list) []]) ()
let render_onclickPropsAsString =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.Event
               ("_onclick",
                 (React.Attribute.Event.Inline ("alert('hello')" : string)))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
