let lower =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) []
let lower_empty_attr =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.String
               ("className", ((("")[@reason.raw_literal ""]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_inline_styles =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.Style
               ((ReactDOM.Style.make ~backgroundColor:(("gainsboro")
                   [@reason.raw_literal "gainsboro"]) ())
               [@reason.preserve_braces ])))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_inner_html =
  React.createElement "div"
    ((([|(Some (React.Attribute.DangerouslyInnerHtml text))|] |>
         Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lower_opt_attr =
  React.createElement "div"
    ((([|(Option.map
            (fun v -> React.Attribute.String ("tabIndex", (string_of_int v)))
            (tabIndex : int option))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
let lowerWithChildAndProps foo =
  React.createElement "a"
    ((([|(Some
            (React.Attribute.String ("tabIndex", (string_of_int (1 : int)))));(
         Some
           (React.Attribute.String
              ("href", ((("https://example.com")
                [@reason.raw_literal "https://example.com"]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) [foo]
let lower_child_static =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list)
    [React.createElement "span"
       ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
          Array.of_list) []]
let lower_child_ident =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [lolaspa]
let lower_child_single =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list)
    [React.createElement "div"
       ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
          Array.of_list) []]
let lower_children_multiple foo bar =
  React.createElement "lower"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [foo; bar]
let lower_child_with_upper_as_children =
  React.createElement "div"
    ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
       Array.of_list) [App.make ()]
let lower_children_nested =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.String
               ("className", ((("flex-container")
                 [@reason.raw_literal "flex-container"]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list)
    [React.createElement "div"
       ((([|(Some
               (React.Attribute.String
                  ("className", ((("sidebar")
                    [@reason.raw_literal "sidebar"]) : string))))|]
            |> Array.to_list)
           |> (List.filter_map (fun a -> a)))
          |> Array.of_list)
       [React.createElement "h2"
          ((([|(Some
                  (React.Attribute.String
                     ("className", ((("title")
                       [@reason.raw_literal "title"]) : string))))|]
               |> Array.to_list)
              |> (List.filter_map (fun a -> a)))
             |> Array.of_list)
          [(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
          [@reason.preserve_braces ])];
       React.createElement "nav"
         ((([|(Some
                 (React.Attribute.String
                    ("className", ((("menu")
                      [@reason.raw_literal "menu"]) : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list)
         [React.createElement "ul"
            ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
               Array.of_list)
            [(((examples |>
                  (List.map
                     (fun e ->
                        React.createElement "li"
                          ((([|(Some
                                  (React.Attribute.String
                                     ("key", (((e.path)
                                       [@reason.preserve_braces ]) : 
                                       string))))|]
                               |> Array.to_list)
                              |> (List.filter_map (fun a -> a)))
                             |> Array.of_list)
                          [React.createElement "a"
                             ((([|(Some
                                     (React.Attribute.String
                                        ("href", (((e.path)
                                          [@reason.preserve_braces ]) : 
                                          string))));(Some
                                                        (React.Attribute.Event
                                                           ("onClick",
                                                             (React.Attribute.Event.Mouse
                                                                ((((fun event
                                                                    ->
                                                                    ((ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ])))
                                                                [@reason.preserve_braces
                                                                  ]) : 
                                                                ReactEvent.Mouse.t
                                                                  -> 
                                                                  unit)))))|]
                                  |> Array.to_list)
                                 |> (List.filter_map (fun a -> a)))
                                |> Array.of_list)
                             [((e.title |> s)[@reason.preserve_braces ])]])))
                 |> React.list)
            [@reason.preserve_braces ])]]]]
let fragment foo =
  ((React.fragment ~children:(React.list (([foo])[@bla ][@JSX ])) ())
  [@bla ])
let poly_children_fragment foo bar =
  React.fragment ~children:(React.list (([foo; bar])[@JSX ])) ()
let nested_fragment foo bar baz =
  React.fragment
    ~children:(React.list
                 (([foo;
                   React.fragment
                     ~children:(React.list (([bar; baz])[@JSX ])) ()])
                 [@JSX ])) ()
let nested_fragment_with_lower foo =
  React.fragment
    ~children:(React.list
                 (([React.createElement "div"
                      ((([||] |> Array.to_list) |>
                          (List.filter_map (fun a -> a)))
                         |> Array.of_list) [foo]])[@JSX ])) ()
let upper = Upper.make ()
let upper_prop = Upper.make ~count ()
let upper_children_single foo = Upper.make ~children:foo ()
let upper_children_multiple foo bar =
  Upper.make ~children:(React.list [foo; bar]) ()
let upper_children =
  Page.make ~moreProps:(("hgalo")[@reason.raw_literal "hgalo"])
    ~children:(React.createElement "h1"
                 ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                    |> Array.of_list)
                 [((React.string (("Yep")[@reason.raw_literal "Yep"]))
                 [@reason.preserve_braces ])]) ()
let upper_nested_module =
  Foo.Bar.make ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ()
let upper_child_expr =
  Div.make ~children:((React.int 1)[@reason.preserve_braces ]) ()
let upper_child_ident = Div.make ~children:lola ()
let upper_all_kinds_of_props =
  MyComponent.make ~booleanAttribute:true ~stringAttribute:(("string")
    [@reason.raw_literal "string"]) ~intAttribute:1
    ?forcedOptional:((Some (("hello")[@reason.raw_literal "hello"]))
    [@reason.preserve_braces ][@explicit_arity ])
    ~onClick:((send handleClick)[@reason.preserve_braces ])
    ~children:(React.createElement "div"
                 ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                    |> Array.of_list)
                 [(("hello")[@reason.raw_literal "hello"])]) ()
let upper_ref_with_children =
  FancyButton.make ~ref:buttonRef
    ~children:(React.createElement "div"
                 ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                    |> Array.of_list) []) ()
let lower_ref_with_children =
  React.createElement "button"
    ((([|(Some (React.Attribute.Ref ref));(Some
                                             (React.Attribute.String
                                                ("className",
                                                  ((("FancyButton")
                                                  [@reason.raw_literal
                                                    "FancyButton"]) : 
                                                  string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) [children]
let lower_with_many_props =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.String
               ("translate", ((("yes")[@reason.raw_literal "yes"]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list)
    [React.createElement "picture"
       ((([|(Some
               (React.Attribute.String
                  ("id", ((("idpicture")
                    [@reason.raw_literal "idpicture"]) : string))))|]
            |> Array.to_list)
           |> (List.filter_map (fun a -> a)))
          |> Array.of_list)
       [React.createElement "img"
          ((([|(Some
                  (React.Attribute.String
                     ("src", ((("picture/img.png")
                       [@reason.raw_literal "picture/img.png"]) : string))));(
               Some
                 (React.Attribute.String
                    ("alt", ((("test picture/img.png")
                      [@reason.raw_literal "test picture/img.png"]) : 
                      string))));(Some
                                    (React.Attribute.String
                                       ("id", ((("idimg")
                                         [@reason.raw_literal "idimg"]) : 
                                         string))))|]
               |> Array.to_list)
              |> (List.filter_map (fun a -> a)))
             |> Array.of_list) [];
       React.createElement "source"
         ((([|(Some
                 (React.Attribute.String
                    ("type", ((("image/webp")
                      [@reason.raw_literal "image/webp"]) : string))));(
              Some
                (React.Attribute.String
                   ("src", ((("picture/img1.webp")
                     [@reason.raw_literal "picture/img1.webp"]) : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list) [];
       React.createElement "source"
         ((([|(Some
                 (React.Attribute.String
                    ("type", ((("image/jpeg")
                      [@reason.raw_literal "image/jpeg"]) : string))));(
              Some
                (React.Attribute.String
                   ("src", ((("picture/img2.jpg")
                     [@reason.raw_literal "picture/img2.jpg"]) : string))))|]
              |> Array.to_list)
             |> (List.filter_map (fun a -> a)))
            |> Array.of_list) []]]
let some_random_html_element =
  React.createElement "text"
    ((([|(Some
            (React.Attribute.String
               ("dx", ((("1 2")[@reason.raw_literal "1 2"]) : string))));(
         Some
           (React.Attribute.String
              ("dy", ((("3 4")[@reason.raw_literal "3 4"]) : string))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
module React_component_with_props =
  struct
    let make ?key  =
      ((fun ~lola ->
          fun () ->
            ((React.createElement "div"
                ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                   |> Array.of_list)
                [((React.string lola)[@reason.preserve_braces ])])
            [@reason.preserve_braces ]))
      [@warning "-16"][@warning "-16"])
  end
let react_component_with_props =
  React_component_with_props.make ~lola:(("flores")
    [@reason.raw_literal "flores"]) ()
module Upper_case_with_fragment_as_root =
  struct
    let make ?key  =
      ((fun ?(name= (("")[@reason.raw_literal ""])) ->
          fun () ->
            React.fragment
              ~children:(React.list
                           (([React.createElement "div"
                                ((([||] |> Array.to_list) |>
                                    (List.filter_map (fun a -> a)))
                                   |> Array.of_list)
                                [((React.string
                                     ((("First ")
                                        [@reason.raw_literal "First "]) ^
                                        name))
                                [@reason.preserve_braces ])];
                             Hello.make ~one:(("1")[@reason.raw_literal "1"])
                               ~children:((React.string
                                             ((("2nd ")
                                                [@reason.raw_literal "2nd "])
                                                ^ name))
                               [@reason.preserve_braces ]) ()])[@JSX ])) ())
      [@warning "-16"][@warning "-16"])
  end
module Using_React_memo =
  struct
    let make ?key  =
      ((fun ~a ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(((Printf.sprintf (("`a` is %s")
                    [@reason.raw_literal "`a` is %s"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
      [@warning "-16"][@warning "-16"])
  end
module Using_memo_custom_compare_Props =
  struct
    let make ?key  =
      ((fun ~a ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(((Printf.sprintf (("`a` is %d")
                    [@reason.raw_literal "`a` is %d"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
      [@warning "-16"][@warning "-16"])
  end
module Forward_Ref =
  struct
    let make ?key  =
      ((fun ~children ->
          ((fun ~ref ->
              fun () ->
                React.createElement "button"
                  ((([|(Some (React.Attribute.Ref ref));(Some
                                                           (React.Attribute.String
                                                              ("className",
                                                                ((("FancyButton")
                                                                [@reason.raw_literal
                                                                  "FancyButton"]) : 
                                                                string))))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun a -> a)))
                     |> Array.of_list) [children])
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Onclick_handler_button =
  struct
    let make ?key  =
      ((fun ~name ->
          ((fun ?isDisabled ->
              fun () ->
                ((let onClick event = Js.log event in
                  React.createElement "button"
                    ((([|(Some
                            (React.Attribute.String ("name", (name : string))));(
                         Some
                           (React.Attribute.Event
                              ("onClick",
                                (React.Attribute.Event.Mouse
                                   (onClick : ReactEvent.Mouse.t -> unit)))));(
                         Some
                           (React.Attribute.Bool
                              ("disabled", (isDisabled : bool))))|]
                         |> Array.to_list)
                        |> (List.filter_map (fun a -> a)))
                       |> Array.of_list) [])
                [@reason.preserve_braces ]))
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Children_as_string =
  struct
    let make ?key  =
      ((fun ?(name= (("joe")[@reason.raw_literal "joe"])) ->
          fun () ->
            React.createElement "div"
              ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a))) |>
                 Array.of_list)
              [(((Printf.sprintf (("`name` is %s")
                    [@reason.raw_literal "`name` is %s"]) name)
                   |> React.string)
              [@reason.preserve_braces ])])
      [@warning "-16"][@warning "-16"])
  end
let () = Dream.run ()
let l = 33
module Uppercase_with_SSR_components =
  struct
    let make ?key  =
      ((fun ~children ->
          ((fun ~moreProps ->
              fun () ->
                React.createElement "html"
                  ((([||] |> Array.to_list) |> (List.filter_map (fun a -> a)))
                     |> Array.of_list)
                  [React.createElement "head"
                     ((([||] |> Array.to_list) |>
                         (List.filter_map (fun a -> a)))
                        |> Array.of_list)
                     [React.createElement "title"
                        ((([||] |> Array.to_list) |>
                            (List.filter_map (fun a -> a)))
                           |> Array.of_list)
                        [((React.string
                             ((("SSR React ")
                                [@reason.raw_literal "SSR React "]) ^
                                moreProps))
                        [@reason.preserve_braces ])]];
                  React.createElement "body"
                    ((([||] |> Array.to_list) |>
                        (List.filter_map (fun a -> a)))
                       |> Array.of_list)
                    [React.createElement "div"
                       ((([|(Some
                               (React.Attribute.String
                                  ("id", ((("root")
                                    [@reason.raw_literal "root"]) : string))))|]
                            |> Array.to_list)
                           |> (List.filter_map (fun a -> a)))
                          |> Array.of_list) [children];
                    React.createElement "script"
                      ((([|(Some
                              (React.Attribute.String
                                 ("src", ((("/static/client.js")
                                   [@reason.raw_literal "/static/client.js"]) : 
                                   string))))|]
                           |> Array.to_list)
                          |> (List.filter_map (fun a -> a)))
                         |> Array.of_list) []]])
          [@warning "-16"][@warning "-16"]))
      [@warning "-16"])
  end
module Upper_with_aria =
  struct
    let make ?key  =
      ((fun ~children ->
          fun () ->
            React.createElement "div"
              ((([|(Some
                      (React.Attribute.String
                         ("aria-hidden", ((("true")
                           [@reason.raw_literal "true"]) : string))))|]
                   |> Array.to_list)
                  |> (List.filter_map (fun a -> a)))
                 |> Array.of_list) [children])
      [@warning "-16"][@warning "-16"])
  end
let data_attributes_should_transform_to_kebabcase =
  React.fragment
    ~children:(React.list
                 (([React.createElement "div"
                      ((([|(Some
                              (React.Attribute.String
                                 ("data-attribute", ((("")
                                   [@reason.raw_literal ""]) : string))));(
                           Some
                             (React.Attribute.String
                                ("dataattribute", ((("")
                                  [@reason.raw_literal ""]) : string))));(
                           Some
                             (React.Attribute.String
                                ("className", ((("md:w-1/3")
                                  [@reason.raw_literal "md:w-1/3"]) : 
                                  string))))|]
                           |> Array.to_list)
                          |> (List.filter_map (fun a -> a)))
                         |> Array.of_list) [];
                   React.createElement "div"
                     ((([|(Some
                             (React.Attribute.String
                                ("className", ((("md:w-2/3")
                                  [@reason.raw_literal "md:w-2/3"]) : 
                                  string))))|]
                          |> Array.to_list)
                         |> (List.filter_map (fun a -> a)))
                        |> Array.of_list) []])[@JSX ])) ()
let render_onclickPropsAsString =
  React.createElement "div"
    ((([|(Some
            (React.Attribute.Event
               ("_onclick",
                 (React.Attribute.Event.Inline ((("alert('hello')")
                    [@reason.raw_literal "alert('hello')"]) : string)))))|]
         |> Array.to_list)
        |> (List.filter_map (fun a -> a)))
       |> Array.of_list) []
