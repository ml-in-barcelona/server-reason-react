{1:intro Introduction}

server-reason-react is an implementation of react-dom/server and some of React's internals in OCaml. Its purpose is to render HTML markup from the server for a Reason React application natively.

{[
  module Greetings = {
    [@react.component]
    let make = (~name) => {
      <div>
        <h1>
          {React.string("Hello " ++ name)}
        </h1>
      </div>
    }
  };

  let html = ReactDOM.renderToStaticMarkup(<Greetings name="visitor" />)
  // <div><h1>Hello visitor</h1></div>
]}

{1:core React and ReactDOM}

server-reason-react provides {!React} and {!ReactDOM} modules with the same interface as reason-react, including the JSX transformation via [server-reason-react.ppx].

- {!React} server-reason-react.react
- {!ReactDOM} server-reason-react.reactDom

[server-reason-react.ppx] needs to be a different ppx than [reason-react-ppx] to transform domProps into an interal representation of Props where the type is known ahead of time in order to render them on the server.

Add [server-reason-react.ppx] to your pps list in your dune files
{[ (preprocess (pps server-reason-react.ppx)) ]}

{2:universal Make sure your code is universal}

One big challenge of sharing code between client and server is that the server and the client platforms hav different API environments. You can't use browser's API on the server, and you can't use FileSystem API on the client (to give an example).

In this aspect server-reason-react SSR is not much different than Node.js. Node.js doesn't provide a window/document/etc and leaves the user to manually check for them on each usage. In our case, we don't want to run those in the server-context, but we want to compile them (!)

 So, we want to prevent browser's API calls, Js.* to be called on the server.

There're a few utilities that will be handy to make your frontend code work in native.
server-reason-react comes with re-implementations for such as {!Belt}, {!Js}, [Promise], and [Webapi] to make it easier to write universal code and don't worry about the platform.

All of them are implementations of the same APIs as their originals. [Belt] is feature complete while the rest are still alpha, some missing APIs and incorrect functionality.

Visit each API page for more information:

- {!Belt} server-reason-react.belt
- {!Js} server-reason-react.js
- server-reason-react.promise (vendored https://github.com/aantron/promise and make it compatible)
- server-reason-react.webapi (vendored https://github.com/melange-community/melange-webapi and stripped down to the bare minimum)

{2:browser_ppx Exclude client code from the native build}

Sometimes shared code will have some parts that are meant to be executed only on the client. For example, if you're using [Webapi] to query the DOM, you don't want to run that on the server.

Thanks to [browser_ppx], we can easily discard what's meant to be running on the client and avoid the execution on the server:

{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
};
]}

Add [browser_ppx] to your pps in your dune files. Don't forget to add it on both "server" and "client" dune files, since you want to discard the content and add [browser_only -js] only to the client.

On client's dune:
{[ (preprocess (pps browser_ppx -js)) ]}
On server's dune:
{[ (preprocess (pps browser_ppx)) ]}

The method used by [browser_only] to discards the function is transforming the body of your function into a raising exception. Sometimes it can be useful to wrap it in a try/catch block to prevent the exception from crashing, or to provide a default value or do something else.

For example:
{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
}

let main = id =>
  try(countDomNodes(id)) {
  | _ => 0
  };
]}

{2:ppx Externals and melange.ppx attributes}

Since `melange.ppx` is not compatible with native, we provide `server-reason-react.melange.ppx` instead, to allow the ma It enables a few features:

- Enables pipe_first {->}
- Supports all {mel.} attributes
- Supports RegExp {%re "/regex/"}
- Supports Object access {##}

{[ (preprocess (pps server-reason-react.melange.ppx)) ]}
