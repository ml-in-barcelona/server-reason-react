{1:intro Introduction}

server-reason-react is an implementation of react-dom/server and some of React's internals in OCaml. Its purpose is to render HTML markup from the server for a Reason React application natively.

{[
  module Greetings = {
    [@react.component]
    let make = (~name) => {
      <div>
        <h1>
          {React.string("Hello " ++ name)}
        </h1>
      </div>
    }
  };

  let html = ReactDOM.renderToStaticMarkup(<Greetings name="visitor" />)
  // <div><h1>Hello visitor</h1></div>
]}

{1:core React and ReactDOM}

server-reason-react provides {!React} and {!ReactDOM} modules with the same interface as reason-react, including the JSX transformation via [server-reason-react-ppx].

- {!React} server-reason-react.react
- {!ReactDOM} server-reason-react.reactDom

[server-reason-react.ppx] needs to be a different ppx than [reason-react-ppx] just to transform domProps into an interal representation of Props where the type is known in order to render them on the server.

{2:universal Make sure your code is universal}

One big challenge of sharing code between client and server is that the server side has different API environment with client side. In this respect server-reason-react SSR is not much different than Node.js, except on native you should prevent browser's API calls and Js and compile it properly while in Node.js is just a matter of not calling those browser APIs.

There're a few utilities that will be handy to make your frontend code work in native, such as {!Belt}, {!Js}, [Promise], and [Webapi].

All of them are implementations of the same APIs as their originals. [Belt] is feature complete while the rest are still alpha, some missing APIs and incorrect functionality.

Visit each API page for more information:

- {!Belt} server-reason-react.belt
- {!Js} server-reason-react.js
- server-reason-react.promise (vendored https://github.com/aantron/promise and make it compatible)
- server-reason-react.webapi (vendored https://github.com/melange-community/melange-webapi and stripped down to the bare minimum)

{2:pipe_first_ppx Make pipe first work on native}

Add [pipe_first_ppx] to your pps list in your dune files
{[ (preprocess (pps pipe_first_ppx)) ]}

{2:browser_ppx Exclude client code from the native build}

Thanks to [browser_ppx], we can easily discard what's meant to be running on the client and avoid the execution on the server:

{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
};
]}

Add [browser_ppx] to your pps in your dune files. Don't forget to add it on both "server" and "client" dune files, since you want to discard the content and add [browser_only -js] only to the client.

On client's dune:
{[ (preprocess (pps browser_ppx -js)) ]}
On server's dune:
{[ (preprocess (pps browser_ppx)) ]}

The method used by [browser_only] to discards the function is transforming the body of your function into a raise exception ([ReactDOM.Impossible_in_ssr]). Sometimes is useful to wrap it in a try/catch block to prevent the exception from crashing and maybe set a default value or do something else.

{[
let%browser_only countDomNodes = (id) => {
  let elements = Webapi.Element.querySelector("#" ++ id);
  let arr_elements = Webapi.Element.toArray(elements);
  Array.length(arr_elements);
}

let main = id =>
  try(countDomNodes(id)) {
  | _ => 0
  };
]}
